// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: shipping.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShipping = `-- name: CreateShipping :exec
insert into shipping(
        created_at,
        location,
        address,
        apartment,
        phone_number,
        user_id,
        order_id,
        status
    )
values(
        current_timestamp,
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7
    )
`

type CreateShippingParams struct {
	Location    string      `json:"location"`
	Address     pgtype.Text `json:"address"`
	Apartment   pgtype.Text `json:"apartment"`
	PhoneNumber string      `json:"phone_number"`
	UserID      pgtype.Int8 `json:"user_id"`
	OrderID     int64       `json:"order_id"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) CreateShipping(ctx context.Context, arg CreateShippingParams) error {
	_, err := q.db.Exec(ctx, createShipping,
		arg.Location,
		arg.Address,
		arg.Apartment,
		arg.PhoneNumber,
		arg.UserID,
		arg.OrderID,
		arg.Status,
	)
	return err
}

const listShipping = `-- name: ListShipping :many
select id, created_at, updated_at, deleted_at, location, address, apartment, phone_number, user_id, order_id, status
from shipping
where status = $1
`

// TODO
func (q *Queries) ListShipping(ctx context.Context, status pgtype.Text) ([]*Shipping, error) {
	rows, err := q.db.Query(ctx, listShipping, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Shipping{}
	for rows.Next() {
		var i Shipping
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Location,
			&i.Address,
			&i.Apartment,
			&i.PhoneNumber,
			&i.UserID,
			&i.OrderID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipping = `-- name: UpdateShipping :exec
update shipping
set updated_at = current_timestamp,
    phone_number = $2,
    status = $3
where id = $1
`

type UpdateShippingParams struct {
	ID          int64       `json:"id"`
	PhoneNumber string      `json:"phone_number"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) UpdateShipping(ctx context.Context, arg UpdateShippingParams) error {
	_, err := q.db.Exec(ctx, updateShipping, arg.ID, arg.PhoneNumber, arg.Status)
	return err
}
