// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :exec
insert into orders(
    created_at,
    grand_total,
    serial_number,
    shipping_address,
    user_id
  )
values(
    current_timestamp,
    $1,
    $2,
    $3,
    $4
  )
`

type CreateOrderParams struct {
	GrandTotal      int32       `json:"grand_total"`
	SerialNumber    string      `json:"serial_number"`
	ShippingAddress int64       `json:"shipping_address"`
	UserID          pgtype.Int8 `json:"user_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder,
		arg.GrandTotal,
		arg.SerialNumber,
		arg.ShippingAddress,
		arg.UserID,
	)
	return err
}

const createOrderProduct = `-- name: CreateOrderProduct :exec
insert into order_products(
    created_at,
    quantity,
    total_price,
    product_variants,
    product_id,
    order_id
  )
values(
    current_timestamp,
    $1,
    $2,
    $3,
    $4,
    $5
  )
`

type CreateOrderProductParams struct {
	Quantity        int32       `json:"quantity"`
	TotalPrice      int32       `json:"total_price"`
	ProductVariants []int32     `json:"product_variants"`
	ProductID       int64       `json:"product_id"`
	OrderID         pgtype.Int8 `json:"order_id"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) error {
	_, err := q.db.Exec(ctx, createOrderProduct,
		arg.Quantity,
		arg.TotalPrice,
		arg.ProductVariants,
		arg.ProductID,
		arg.OrderID,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
delete from orders
where id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const deleteOrderProduct = `-- name: DeleteOrderProduct :exec
delete from order_products
where id = $1
`

func (q *Queries) DeleteOrderProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrderProduct, id)
	return err
}

const getOrderProduct = `-- name: GetOrderProduct :one
select p.id,
  p.created_at,
  p.updated_at,
  p.name,
  p.price,
  p.discount_price,
  p.sku,
  p.description,
  p.category_id,
  p.default_image,
  order_products.id,
  order_products.total_price,
  order_products.quantity,
  (
    SELECT json_agg(
        json_build_object(
          'id',
          v.id,
          'name',
          v.name,
          'type',
          v.type
        )
      )
    FROM product_variants v
    WHERE v.id = ANY(order_products.product_variants)
  ) AS product_variants
from order_products
  left join products p on p.id = order_products.product_id
where order_products.id = $1
`

type GetOrderProductRow struct {
	ID              pgtype.Int8        `json:"id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            pgtype.Text        `json:"name"`
	Price           pgtype.Int4        `json:"price"`
	DiscountPrice   pgtype.Int4        `json:"discount_price"`
	Sku             pgtype.Text        `json:"sku"`
	Description     pgtype.Text        `json:"description"`
	CategoryID      pgtype.Int8        `json:"category_id"`
	DefaultImage    pgtype.Text        `json:"default_image"`
	ID_2            int64              `json:"id_2"`
	TotalPrice      int32              `json:"total_price"`
	Quantity        int32              `json:"quantity"`
	ProductVariants []byte             `json:"product_variants"`
}

func (q *Queries) GetOrderProduct(ctx context.Context, id int64) (*GetOrderProductRow, error) {
	row := q.db.QueryRow(ctx, getOrderProduct, id)
	var i GetOrderProductRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Price,
		&i.DiscountPrice,
		&i.Sku,
		&i.Description,
		&i.CategoryID,
		&i.DefaultImage,
		&i.ID_2,
		&i.TotalPrice,
		&i.Quantity,
		&i.ProductVariants,
	)
	return &i, err
}

const listOrderProducts = `-- name: ListOrderProducts :many
select p.id,
  p.created_at,
  p.updated_at,
  p.name,
  p.price,
  p.discount_price,
  p.sku,
  p.description,
  p.category_id,
  p.default_image,
  order_products.id,
  order_products.total_price,
  order_products.quantity,
  (
    SELECT json_agg(
        json_build_object(
          'id',
          v.id,
          'name',
          v.name,
          'type',
          v.type
        )
      )
    FROM product_variants v
    WHERE v.id = ANY(order_products.product_variants)
  ) AS product_variants
from order_products
  left join products p on p.id = order_products.product_id
`

type ListOrderProductsRow struct {
	ID              pgtype.Int8        `json:"id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            pgtype.Text        `json:"name"`
	Price           pgtype.Int4        `json:"price"`
	DiscountPrice   pgtype.Int4        `json:"discount_price"`
	Sku             pgtype.Text        `json:"sku"`
	Description     pgtype.Text        `json:"description"`
	CategoryID      pgtype.Int8        `json:"category_id"`
	DefaultImage    pgtype.Text        `json:"default_image"`
	ID_2            int64              `json:"id_2"`
	TotalPrice      int32              `json:"total_price"`
	Quantity        int32              `json:"quantity"`
	ProductVariants []byte             `json:"product_variants"`
}

func (q *Queries) ListOrderProducts(ctx context.Context) ([]*ListOrderProductsRow, error) {
	rows, err := q.db.Query(ctx, listOrderProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListOrderProductsRow{}
	for rows.Next() {
		var i ListOrderProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.DiscountPrice,
			&i.Sku,
			&i.Description,
			&i.CategoryID,
			&i.DefaultImage,
			&i.ID_2,
			&i.TotalPrice,
			&i.Quantity,
			&i.ProductVariants,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
select p.id,
  p.created_at,
  p.updated_at,
  p.name,
  p.price,
  p.discount_price,
  p.sku,
  p.description,
  p.category_id,
  p.default_image,
  order_products.id,
  order_products.total_price,
  order_products.quantity,
  o.id,
  o.created_at,
  o.grand_total,
  o.serial_number,
  o.confirmed,
  u.id,
  u.email,
  u.phone_number,
  s.id,
  st_x(s.location) as latitude,
  st_y(s.location) as longitude,
  (
    SELECT json_agg(
        json_build_object('id', v.id, 'name', v.name, 'type', v.type)
      )
    FROM product_variants v
    WHERE v.id = ANY(order_products.product_variants)
  ) AS product_variants
from order_products
  left join products p on p.id = order_products.product_id
  left join users u on u.id = order_products.user_id
  left join shipping s on s.id = orders.shipping_address
  left join orders o on o.id = order_products.order_id
`

type ListOrdersRow struct {
	ID              pgtype.Int8        `json:"id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            pgtype.Text        `json:"name"`
	Price           pgtype.Int4        `json:"price"`
	DiscountPrice   pgtype.Int4        `json:"discount_price"`
	Sku             pgtype.Text        `json:"sku"`
	Description     pgtype.Text        `json:"description"`
	CategoryID      pgtype.Int8        `json:"category_id"`
	DefaultImage    pgtype.Text        `json:"default_image"`
	ID_2            int64              `json:"id_2"`
	TotalPrice      int32              `json:"total_price"`
	Quantity        int32              `json:"quantity"`
	ID_3            pgtype.Int8        `json:"id_3"`
	CreatedAt_2     pgtype.Timestamptz `json:"created_at_2"`
	GrandTotal      pgtype.Int4        `json:"grand_total"`
	SerialNumber    pgtype.Text        `json:"serial_number"`
	Confirmed       pgtype.Bool        `json:"confirmed"`
	ID_4            pgtype.Int8        `json:"id_4"`
	Email           pgtype.Text        `json:"email"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	ID_5            pgtype.Int8        `json:"id_5"`
	Latitude        interface{}        `json:"latitude"`
	Longitude       interface{}        `json:"longitude"`
	ProductVariants []byte             `json:"product_variants"`
}

func (q *Queries) ListOrders(ctx context.Context) ([]*ListOrdersRow, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListOrdersRow{}
	for rows.Next() {
		var i ListOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.DiscountPrice,
			&i.Sku,
			&i.Description,
			&i.CategoryID,
			&i.DefaultImage,
			&i.ID_2,
			&i.TotalPrice,
			&i.Quantity,
			&i.ID_3,
			&i.CreatedAt_2,
			&i.GrandTotal,
			&i.SerialNumber,
			&i.Confirmed,
			&i.ID_4,
			&i.Email,
			&i.PhoneNumber,
			&i.ID_5,
			&i.Latitude,
			&i.Longitude,
			&i.ProductVariants,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOrders = `-- name: ListUserOrders :many
select p.id,
  p.created_at,
  p.updated_at,
  p.name,
  p.price,
  p.discount_price,
  p.sku,
  p.description,
  p.category_id,
  p.default_image,
  order_products.id,
  order_products.total_price,
  order_products.quantity,
  o.id,
  o.created_at,
  o.grand_total,
  o.serial_number,
  o.confirmed,
  u.id,
  u.email,
  u.phone_number,
  s.id,
  st_x(s.location) as latitude,
  st_y(s.location) as longitude,
  (
    SELECT json_agg(
        json_build_object('id', v.id, 'name', v.name, 'type', v.type)
      )
    FROM product_variants v
    WHERE v.id = ANY(order_products.product_variants)
  ) AS product_variants
from order_products
  left join products p on p.id = order_products.product_id
  left join users u on u.id = order_products.user_id
  left join shipping s on s.id = orders.shipping_address
  left join orders o on o.id = order_products.order_id
where orders.user_id = $1
`

type ListUserOrdersRow struct {
	ID              pgtype.Int8        `json:"id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            pgtype.Text        `json:"name"`
	Price           pgtype.Int4        `json:"price"`
	DiscountPrice   pgtype.Int4        `json:"discount_price"`
	Sku             pgtype.Text        `json:"sku"`
	Description     pgtype.Text        `json:"description"`
	CategoryID      pgtype.Int8        `json:"category_id"`
	DefaultImage    pgtype.Text        `json:"default_image"`
	ID_2            int64              `json:"id_2"`
	TotalPrice      int32              `json:"total_price"`
	Quantity        int32              `json:"quantity"`
	ID_3            pgtype.Int8        `json:"id_3"`
	CreatedAt_2     pgtype.Timestamptz `json:"created_at_2"`
	GrandTotal      pgtype.Int4        `json:"grand_total"`
	SerialNumber    pgtype.Text        `json:"serial_number"`
	Confirmed       pgtype.Bool        `json:"confirmed"`
	ID_4            pgtype.Int8        `json:"id_4"`
	Email           pgtype.Text        `json:"email"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	ID_5            pgtype.Int8        `json:"id_5"`
	Latitude        interface{}        `json:"latitude"`
	Longitude       interface{}        `json:"longitude"`
	ProductVariants []byte             `json:"product_variants"`
}

func (q *Queries) ListUserOrders(ctx context.Context, userID pgtype.Int8) ([]*ListUserOrdersRow, error) {
	rows, err := q.db.Query(ctx, listUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUserOrdersRow{}
	for rows.Next() {
		var i ListUserOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.DiscountPrice,
			&i.Sku,
			&i.Description,
			&i.CategoryID,
			&i.DefaultImage,
			&i.ID_2,
			&i.TotalPrice,
			&i.Quantity,
			&i.ID_3,
			&i.CreatedAt_2,
			&i.GrandTotal,
			&i.SerialNumber,
			&i.Confirmed,
			&i.ID_4,
			&i.Email,
			&i.PhoneNumber,
			&i.ID_5,
			&i.Latitude,
			&i.Longitude,
			&i.ProductVariants,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
update orders
set updated_at = current_timestamp,
  grand_total = $2,
  confirmed = $3
where id = $1
returning orders.user_id
`

type UpdateOrderParams struct {
	ID         int64       `json:"id"`
	GrandTotal int32       `json:"grand_total"`
	Confirmed  pgtype.Bool `json:"confirmed"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.GrandTotal, arg.Confirmed)
	var user_id pgtype.Int8
	err := row.Scan(&user_id)
	return user_id, err
}

const updateOrderProduct = `-- name: UpdateOrderProduct :exec
update order_products
set updated_at = current_timestamp,
  quantity = $2,
  total_price = $3,
  product_variants = $4
where id = $1
`

type UpdateOrderProductParams struct {
	ID              int64   `json:"id"`
	Quantity        int32   `json:"quantity"`
	TotalPrice      int32   `json:"total_price"`
	ProductVariants []int32 `json:"product_variants"`
}

func (q *Queries) UpdateOrderProduct(ctx context.Context, arg UpdateOrderProductParams) error {
	_, err := q.db.Exec(ctx, updateOrderProduct,
		arg.ID,
		arg.Quantity,
		arg.TotalPrice,
		arg.ProductVariants,
	)
	return err
}
