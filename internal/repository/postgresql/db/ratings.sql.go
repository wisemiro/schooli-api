// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: ratings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRating = `-- name: CreateRating :exec
insert into product_ratings (
        created_at,
        user_id,
        stars,
        feedback,
        product_id
    )
values(
        current_timestamp,
        $1,
        $2,
        $3,
        $4
    )
`

type CreateRatingParams struct {
	UserID    int64       `json:"user_id"`
	Stars     int32       `json:"stars"`
	Feedback  pgtype.Text `json:"feedback"`
	ProductID int64       `json:"product_id"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) error {
	_, err := q.db.Exec(ctx, createRating,
		arg.UserID,
		arg.Stars,
		arg.Feedback,
		arg.ProductID,
	)
	return err
}

const deleteRatings = `-- name: DeleteRatings :exec
delete from product_ratings
where id = $1
`

func (q *Queries) DeleteRatings(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRatings, id)
	return err
}

const getRating = `-- name: GetRating :one
select product_ratings.id,
    product_ratings.created_at,
    product_ratings.stars,
    product_ratings.feedback,
    product_ratings.user_id,
    product_ratings.product_id,
    u.email,
    p.name
from product_ratings
    left join users u on u.id = product_ratings.user_id
    left join products p on p.id = product_ratings.product_id
where product_ratings.id = $1
`

type GetRatingRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Stars     int32              `json:"stars"`
	Feedback  pgtype.Text        `json:"feedback"`
	UserID    int64              `json:"user_id"`
	ProductID int64              `json:"product_id"`
	Email     pgtype.Text        `json:"email"`
	Name      pgtype.Text        `json:"name"`
}

func (q *Queries) GetRating(ctx context.Context, id int64) (*GetRatingRow, error) {
	row := q.db.QueryRow(ctx, getRating, id)
	var i GetRatingRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Stars,
		&i.Feedback,
		&i.UserID,
		&i.ProductID,
		&i.Email,
		&i.Name,
	)
	return &i, err
}

const listProductRatings = `-- name: ListProductRatings :many
select product_ratings.id,
    product_ratings.created_at,
    product_ratings.stars,
    product_ratings.feedback,
    product_ratings.user_id,
    product_ratings.product_id,
    u.email,
    p.name
from product_ratings
    left join users u on u.id = product_ratings.user_id
    left join products p on p.id = product_ratings.product_id
where product_id = $1
`

type ListProductRatingsRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Stars     int32              `json:"stars"`
	Feedback  pgtype.Text        `json:"feedback"`
	UserID    int64              `json:"user_id"`
	ProductID int64              `json:"product_id"`
	Email     pgtype.Text        `json:"email"`
	Name      pgtype.Text        `json:"name"`
}

func (q *Queries) ListProductRatings(ctx context.Context, productID int64) ([]*ListProductRatingsRow, error) {
	rows, err := q.db.Query(ctx, listProductRatings, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProductRatingsRow{}
	for rows.Next() {
		var i ListProductRatingsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Stars,
			&i.Feedback,
			&i.UserID,
			&i.ProductID,
			&i.Email,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :exec
update product_ratings
set updated_at = current_timestamp,
    stars = $2,
    feedback = $3
where id = $1
`

type UpdateRatingParams struct {
	ID       int64       `json:"id"`
	Stars    int32       `json:"stars"`
	Feedback pgtype.Text `json:"feedback"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.Exec(ctx, updateRating, arg.ID, arg.Stars, arg.Feedback)
	return err
}
